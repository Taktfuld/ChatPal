# Overview

This is an AI-powered Discord bot called "0xzero" that integrates OpenAI's GPT-4o to provide intelligent responses to user messages in designated Discord channels. The bot features a professional interface with OpenAI-style green embeds, admin-only configuration commands, and the ability to maintain conversational context. Built with Node.js, it uses Discord.js v14 for Discord integration and the official OpenAI SDK for AI capabilities.

# User Preferences

Preferred communication style: Simple, everyday language.

# System Architecture

## Application Structure

**Single-file Architecture**: The entire application is contained in `index.js`, following a simple, monolithic design suitable for a lightweight bot. This approach prioritizes simplicity over modularity, making the codebase easy to understand and modify for small-scale deployments.

**Rationale**: For a Discord bot with limited scope (AI chat responses and basic admin commands), a single-file architecture reduces complexity and overhead. The tradeoff is reduced maintainability as features grow.

## Discord Integration

**Framework**: Discord.js v14 with Gateway API
- **Intents Used**: Guilds, GuildMessages, MessageContent, GuildMembers
- **Event-driven Pattern**: Utilizes Discord.js event listeners (`ready`, `messageCreate`) for handling bot lifecycle and message processing

**Design Decision**: The bot uses Discord.js v14's modern intents system, requiring explicit declaration of privileged intents (Message Content, Server Members). This provides security and performance benefits but requires additional configuration in the Discord Developer Portal.

## AI Integration

**Provider**: OpenAI GPT-4o via official OpenAI SDK
- **Configuration**: Supports custom base URLs for API endpoint flexibility
- **Response Strategy**: Default concise responses with ability to detect detail requests

**Architectural Choice**: Direct OpenAI SDK integration rather than abstraction layer. This tightly couples the bot to OpenAI but simplifies implementation and reduces latency. The `baseURL` configuration allows for proxy services or alternative OpenAI-compatible endpoints.

## State Management

**Channel Configuration**: In-memory storage using a single variable (`setupChannelId`)
- **Persistence**: None - configuration resets on bot restart
- **Scope**: Global, single-channel limitation per bot instance

**Limitation**: This is a significant architectural constraint. The bot can only monitor one channel across all servers, and configuration doesn't persist across restarts. This suggests the bot is designed for single-server deployment or as a proof-of-concept.

**Alternative Considered**: File-based or database storage for persistent multi-server support was not implemented, likely to maintain simplicity.

## Message Processing Flow

1. **Filtering**: Ignores bot messages and DMs
2. **Command Detection**: Checks for prefix-based commands (`!setchannel`, `!purge`, `!help`)
3. **Channel Validation**: For AI responses, validates message is in configured channel
4. **AI Processing**: Sends message to OpenAI API and formats response as Discord embed

**Design Pattern**: Linear message processing with early returns for non-applicable messages. No queue system or rate limiting implemented.

## Security & Permissions

**Admin Commands**: `!setchannel` and `!purge` require administrator permissions
- **Permission Check**: Uses Discord.js `PermissionFlagBits.Administrator`
- **Error Handling**: Sends user-friendly error embeds when permissions are insufficient

**Message Filtering**: Messages starting with "?" are ignored to avoid conflicts with other bots

## User Interface

**Response Format**: Discord embeds with consistent branding
- **Color Scheme**: OpenAI green (#10A37F)
- **Footer**: Branded with "0xzero AI â€¢ Made by Taktfuld"
- **Timestamps**: All embeds include timestamps for context

**Design Philosophy**: Professional, minimal interface that mirrors OpenAI's brand aesthetic while maintaining clear Discord bot identity.

# External Dependencies

## Required APIs & Services

**Discord Bot API**
- **Purpose**: Core platform integration for receiving/sending messages
- **Authentication**: Bot token (DISCORD_BOT_TOKEN)
- **Requirements**: Privileged Gateway Intents must be enabled in Discord Developer Portal
  - Message Content Intent
  - Server Members Intent

**OpenAI API**
- **Purpose**: GPT-4o model access for AI-powered responses
- **Authentication**: API key (AI_INTEGRATIONS_OPENAI_API_KEY)
- **Configuration**: Customizable base URL (AI_INTEGRATIONS_OPENAI_BASE_URL)
- **Default Endpoint**: https://api.openai.com/v1

## NPM Dependencies

**discord.js** (v14.23.2)
- Discord API wrapper providing type-safe interfaces for Gateway API, embeds, and permissions
- Handles WebSocket connections, event management, and rate limiting

**openai** (v6.3.0)
- Official OpenAI SDK for Node.js
- Provides typed interfaces for chat completions and streaming responses

**dotenv** (v17.2.3)
- Environment variable management
- Loads configuration from `.env` file at runtime

## Runtime Requirements

**Node.js**: Version 16.11.0 or higher
- Required by Discord.js v14 for modern JavaScript features and performance optimizations
